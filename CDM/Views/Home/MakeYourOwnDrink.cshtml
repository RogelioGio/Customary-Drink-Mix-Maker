@model CDM.Models.CustomDrinkModel
@{
    ViewBag.Title = "Make Your Own Drink";
}
<article>
    <h2>Create Your Drink</h2>
    <form id="drinkForm" method="post" action="/Home/MakeYourOwnDrink">
        <section class="Base">
            <ul>
                @foreach(var Base in Model.productList) { 
                    <li>
                        <label class="div transition ease-in-out delay-150 -translate-y-px-hover duration-300 scale-110-hover" id="parent">
                            <!-- <img src="~/ProductAssets/@Base.imageUrlString">-->
                            <input type="radio" name="BaseDrink" value="@Base.Product_Name" id="id" onchange="products_addon(this, '@Base.Product_ID', '@Base.Product_Name', '@Base.Product_Price')" /> @Base.Product_Name (₱@Base.Product_Price)
                        </label>
                    </li>
                }
            </ul>
        </section>
        <secction class="DrinkSize">
            <label>Size</label><br />
            <input type="radio" id="SizeSmall" name="Size" value="Small" onchange="updateLayers(3)" /> Small - (8oz)
            <input type="radio" id="SizeMedium" name="Size" value="Medium" onchange="updateLayers(4)" /> Medium - (16oz)
            <input type="radio" id="SizeLarge" name="Size" value="Large" onchange="updateLayers(5)" /> Large - (22oz)
        </secction>
        <section id="layersContainer">

        </section>
        <section class="button">
            <button type="button" onclick="window.location='@Url.Action("Index", "Home")'">Back</button>
            <button type="submit" onclick="drinkResponsibly()">Create Drink</button>
        </section>
    </form>
</article>
<script>
    const shotCosts = {
        None: 0,
        Beer: 10,
        Gin: 20,
        Wine: 30,
        Sake: 40,
        Whiskey:40
    };

    function InitProductList() {
        var items = @Html.Raw(Json.Encode(Model.productList));
        console.log(items)
    }
    InitProductList()
    function updateLayers(count) {
        const container = document.getElementById('layersContainer');
        container.innerHTML = '';


        var items = @Html.Raw(Json.Encode(Model.productList));
        let productListHTML = '';
        items.forEach(function (p) {
            productListHTML += `<p>${p.Product_Name}</p>`;
        });

        for (let i = 0; i < count; i++) {
            const layerDiv = document.createElement('div');
            layerDiv.innerHTML =
                `<label>Layer ${i + 1}</label>
            ${productListHTML}
            <input type="number" name="Layers[${i}].Percentage" placeholder="Quantity" value="1" min="0" max="100" onchange="validatePercentages()" />
            <button type="button" onclick="addValue(${i}, 10)">+10</button>
            <button type="button" onclick="addValue(${i}, 1)">+1</button>
            <button type="button" onclick="subtractValue(${i}, 1)">-1</button>
            <button type="button" onclick="subtractValue(${i}, 10)">-10</button>
        `;
            container.appendChild(layerDiv);
        }
    }

    function addValue(index, valueToAdd) {
        const input = document.querySelector(`input[name="Layers[${index}].Percentage"]`);
        input.value = parseInt(input.value || 0, 10) + valueToAdd;
        validatePercentages();
    }

    function subtractValue(index, valueToSubtract) {
        const input = document.querySelector(`input[name="Layers[${index}].Percentage"]`);
        input.value = parseInt(input.value || 0, 10) - valueToSubtract;
        input.value = newValue < 0 ? 0 : newValue;
        validatePercentages();
    }

    function validatePercentages() {
        const percentageInputs = document.querySelectorAll('input[name^="Layers"][name$=".Percentage"]');
        let totalPercentage = 0;
        percentageInputs.forEach(input => {
            const value = parseFloat(input.value);
            if (!isNaN(value)) {
                totalPercentage += value;
            }
        });

        if (totalPercentage > 100) {
            alert('The total percentage exceeds 100%. Please adjust the values.');
        }
    }

    document.getElementById('drinkForm').addEventListener('submit', function (event) {
        const percentageInputs = document.querySelectorAll('input[name^="Layers"][name$=".Percentage"]');
        let totalPercentage = 0;
        percentageInputs.forEach(input => {
            const value = parseFloat(input.value);
            if (!isNaN(value)) {
                totalPercentage += value;
            }
        });

        if (totalPercentage > 100) {
            event.preventDefault();
            alert('The total percentage exceeds 100%. Please adjust the values before submitting.');
        }
    });

    function drinkResponsibly() {
        alert("Please remember that we can't be held responsible for the effects of mixing our alcohol beverages with other substances. Your safety matters to us, so please consume responsibly and be mindful of the choices you make. Cheers, and stay safe!");
    }
</script>
